// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userDataFieldNames          = builder.RawFieldNames(&UserData{})
	userDataRows                = strings.Join(userDataFieldNames, ",")
	userDataRowsExpectAutoSet   = strings.Join(stringx.Remove(userDataFieldNames, "`create_time`", "`update_time`"), ",")
	userDataRowsWithPlaceHolder = strings.Join(stringx.Remove(userDataFieldNames, "`user_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheZeroDemoUserDataUserIdPrefix = "cache:zeroDemo:userData:userId:"
)

type (
	userDataModel interface {
		Insert(ctx context.Context, data *UserData) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*UserData, error)
		Update(ctx context.Context, data *UserData) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultUserDataModel struct {
		sqlc.CachedConn
		table string
	}

	UserData struct {
		UserId int64          `db:"user_id"`
		Sex    sql.NullString `db:"sex"`
	}
)

func newUserDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserDataModel {
	return &defaultUserDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user_data`",
	}
}

func (m *defaultUserDataModel) Insert(ctx context.Context, data *UserData) (sql.Result, error) {
	zeroDemoUserDataUserIdKey := fmt.Sprintf("%s%v", cacheZeroDemoUserDataUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Sex)
	}, zeroDemoUserDataUserIdKey)
	return ret, err
}

func (m *defaultUserDataModel) FindOne(ctx context.Context, userId int64) (*UserData, error) {
	zeroDemoUserDataUserIdKey := fmt.Sprintf("%s%v", cacheZeroDemoUserDataUserIdPrefix, userId)
	var resp UserData
	err := m.QueryRowCtx(ctx, &resp, zeroDemoUserDataUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserDataModel) Update(ctx context.Context, data *UserData) error {
	zeroDemoUserDataUserIdKey := fmt.Sprintf("%s%v", cacheZeroDemoUserDataUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, userDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Sex, data.UserId)
	}, zeroDemoUserDataUserIdKey)
	return err
}

func (m *defaultUserDataModel) Delete(ctx context.Context, userId int64) error {
	zeroDemoUserDataUserIdKey := fmt.Sprintf("%s%v", cacheZeroDemoUserDataUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, zeroDemoUserDataUserIdKey)
	return err
}

func (m *defaultUserDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZeroDemoUserDataUserIdPrefix, primary)
}

func (m *defaultUserDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserDataModel) tableName() string {
	return m.table
}
